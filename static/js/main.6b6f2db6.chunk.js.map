{"version":3,"sources":["dal/todolist-api.ts","reportWebVitals.ts","ui/components/addItemForm/AddItemForm.tsx","ui/components/editableSpan/EditableSpan.tsx","utils/error-utils.ts","ui/features/Login/auth-reducer.ts","app/app-reducer.ts","bll/todolists-reducer.ts","bll/tasks-reducer.ts","ui/features/TodolistList/Todolist/Tasks/Task.tsx","ui/features/TodolistList/Todolist/Todolist.tsx","ui/features/TodolistList/TodolistList.tsx","ui/components/errorSnackbar/ErrorSnackbar.tsx","ui/features/Login/Login.tsx","app/App.tsx","bll/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","style","marginTop","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerNetworkError","dispatch","setAppErrorAC","message","setAppStatusAC","status","handleServerAppError","messages","length","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","f","changeTodolistFilterAC","getTodolistAC","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTaskAC","todolistID","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","New","Completed","deadline","startDate","priority","description","res","resultCode","catch","err","Task","useDispatch","removeTask","useCallback","deleteTaskTC","changeStatus","newIsDoneValue","checked","changeTaskTitle","newTitle","className","Checkbox","Delete","Todolist","useSelector","useEffect","items","removeTodolist","addTask","item","createTaskTC","changeTodolistTitle","changeTodolistTitleTC","changeFilter","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","paddingTop","Button","TodolistList","todolists","auth","addTodolist","addTodolistTC","Grid","container","padding","justifyContent","spacing","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b6f2db6.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b7b7629a-058d-4df6-866c-6165a8a8aade',\r\n    },\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TodolistType}>>>('todo-lists', { title });\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${ id }`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{title: string}, AxiosResponse<ResponseType>>(`todo-lists/${ id }`, { title });\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${ todolistId }/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${ todolistId }/tasks/${ taskId }`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{title: string}, AxiosResponse<ResponseType<{item: TaskType}>>>(`todo-lists/${ todolistId }/tasks`, { title });\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{item: TaskType}>>>(`todo-lists/${ todolistId }/tasks/${ taskId }`, model);\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginRequestType) {\r\n        return instance.post<LoginRequestType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>(`auth/me`);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`);\r\n    },\r\n}\r\n\r\n// types\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if(title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if(e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={ !!error }\r\n                   value={ title }\r\n                   onChange={ onChangeHandler }\r\n                   onKeyPress={ onKeyPressHandler }\r\n                   label=\"Title\"\r\n                   helperText={ error }\r\n                   disabled={ props.disabled }\r\n        />\r\n        <IconButton style={ { marginTop: '6px' } }\r\n                    color=\"primary\" onClick={ addItem }\r\n                    disabled={ props.disabled }>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={ title }\r\n                     onChange={ changeTitle }\r\n                     autoFocus onBlur={ activateViewMode }\r\n                     disabled={ props.disabled }/>\r\n        : <span onDoubleClick={ activateEditMode }>{ props.value }</span>\r\n});\r\n","import { setAppErrorAC, setAppStatusAC } from \"../app/app-reducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ResponseType } from \"../dal/todolist-api\";\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({ error: error.message }))\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    if(data.messages.length) {\r\n        dispatch(setAppErrorAC({ error: data.messages[0] }))\r\n    } else {\r\n        dispatch(setAppErrorAC({ error: 'Unknown error' }))\r\n    }\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}","import { setAppStatusAC } from \"../../../app/app-reducer\";\r\nimport { authAPI, LoginRequestType } from \"../../../dal/todolist-api\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../../utils/error-utils\";\r\nimport { AxiosError } from \"axios\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n    },\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const { setIsLoggedInAC } = slice.actions;\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginRequestType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n                dispatch(setIsLoggedInAC({ value: true }))\r\n\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({ value: false }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n","import { authAPI } from \"../dal/todolist-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { setIsLoggedInAC } from \"../ui/features/Login/auth-reducer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: null | string}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    },\r\n})\r\n\r\nexport const { setAppStatusAC, setAppErrorAC, setIsInitializedAC } = slice.actions\r\nexport const appReducer = slice.reducer\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.me().then(res => {\r\n        if(res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            dispatch(setIsLoggedInAC({ value: true }));\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            dispatch(setIsInitializedAC({ isInitialized: true }))\r\n        })\r\n}\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import { todolistAPI, TodolistType } from \"../dal/todolist-api\";\r\nimport { RequestStatusType, setAppStatusAC } from \"../app/app-reducer\";\r\nimport { AxiosError } from \"axios\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\";\r\nimport { Dispatch } from \"redux\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({ ...action.payload.todolist, filter: \"all\", entityStatus: \"idle\" })\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(f => f.id === action.payload.id);\r\n            if(index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(f => f.id === action.payload.id);\r\n            if(index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        getTodolistAC(state, action: PayloadAction<{todolist: TodolistType[]}>) {\r\n            return action.payload.todolist.map(tl => ( { ...tl, filter: 'all', entityStatus: 'idle' } ))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) {\r\n            const index = state.findIndex(f => f.id === action.payload.id)\r\n            if(index > -1) {\r\n                state[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    changeTodolistEntityStatusAC, getTodolistAC, changeTodolistFilterAC,\r\n    changeTodolistTitleAC, addTodolistAC, removeTodolistAC,\r\n} = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// thunk\r\nexport const getTodolistTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            dispatch(getTodolistAC({ todolist: res.data }))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeTodolistEntityStatusAC({ entityStatus: 'loading', id: todolistID }))\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.deleteTodolist(todolistID)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n                dispatch(removeTodolistAC({ id: todolistID }))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            dispatch(changeTodolistTitleAC({ id: todolistId, title: title }))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n                dispatch(addTodolistAC({ todolist: res.data.data.item }))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { TasksStateType } from '../app/App';\r\nimport { TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType } from \"../dal/todolist-api\";\r\nimport { AppRootStateType } from \"./store\";\r\nimport { setAppStatusAC } from \"../app/app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../utils/error-utils\";\r\nimport { AxiosError } from \"axios\";\r\nimport { Dispatch } from 'redux';\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { addTodolistAC, getTodolistAC, removeTodolistAC } from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if(index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateTaskModelType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if(index > -1) {\r\n                tasks[index] = { ...tasks[index], ...action.payload.model };\r\n            }\r\n        },\r\n        setTaskAC(state, action: PayloadAction<{todolistID: string, tasks: TaskType[]}>) {\r\n            state[action.payload.todolistID] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(getTodolistAC, (state, action) => {\r\n            action.payload.todolist.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n    },\r\n})\r\n\r\nexport const {\r\n    removeTaskAC,\r\n    addTaskAC,\r\n    updateTaskAC,\r\n    setTaskAC,\r\n} = slice.actions\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// thunk\r\nexport const getTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            const tasks = res.data.items\r\n            dispatch(setTaskAC({ todolistID: todolistId, tasks }))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            dispatch(removeTaskAC({ taskId: taskId, todolistId: todolistId }))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\nexport const createTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n                dispatch(addTaskAC({ task: res.data.data.item }))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, model: UpdateTaskModelType) => (dispatch: Dispatch,\r\n    getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    if(!task) {\r\n        return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        status: task.status === TaskStatuses.New ? TaskStatuses.Completed : TaskStatuses.New,\r\n        deadline: task.deadline,\r\n        startDate: task.startDate,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        ...model,\r\n    }\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n                dispatch(updateTaskAC({ taskId, model, todolistId }))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n\r\n}\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/editableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteTaskTC, updateTaskTC } from '../../../../../bll/tasks-reducer';\r\nimport { RequestStatusType } from \"../../../../../app/app-reducer\";\r\nimport { TaskStatuses, TaskType } from \"../../../../../dal/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const { task, todolistId, entityStatus } = props\r\n\r\n    const removeTask = useCallback(function () {\r\n        dispatch(deleteTaskTC(todolistId, task.id))\r\n    }, [dispatch, todolistId, task.id])\r\n\r\n    const changeStatus = useCallback(function (e: ChangeEvent<HTMLInputElement>) {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        dispatch(updateTaskTC(todolistId, task.id, { status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New }))\r\n    }, [dispatch, todolistId, task.id]);\r\n\r\n    const changeTaskTitle = useCallback(function (newTitle: string) {\r\n        dispatch(updateTaskTC(todolistId, task.id, { title: newTitle }))\r\n    }, [dispatch, todolistId, task.id]);\r\n\r\n    return <div key={ task.id } className={ task.status === TaskStatuses.Completed ? 'is-done' : '' }>\r\n        <Checkbox\r\n            checked={ task.status === TaskStatuses.Completed }\r\n            color=\"primary\"\r\n            onChange={ changeStatus }\r\n        />\r\n        <EditableSpan value={ task.title } onChange={ changeTaskTitle } disabled={ entityStatus === 'loading' }/>\r\n        <IconButton onClick={ removeTask }>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/addItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/editableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Task } from './Tasks/Task'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Delete } from '@material-ui/icons';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n} from \"../../../../bll/todolists-reducer\";\r\nimport { AppRootStateType } from \"../../../../bll/store\";\r\nimport { TaskStatuses, TaskType } from \"../../../../dal/todolist-api\";\r\nimport { createTaskTC, getTaskTC } from \"../../../../bll/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const { todolist } = props\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[todolist.id])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTaskTC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTodolist = useCallback(function () {\r\n        dispatch(removeTodolistTC(todolist.id))\r\n    }, [dispatch, todolist.id]);\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        dispatch(createTaskTC(todolist.id, title))\r\n    }, [dispatch, todolist.id]);\r\n\r\n    const changeTodolistTitle = useCallback(function (title: string) {\r\n        dispatch(changeTodolistTitleTC(todolist.id, title))\r\n    }, [dispatch, todolist.id]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value });\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if(todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if(todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={ todolist.title } onChange={ changeTodolistTitle } disabled={ todolist.entityStatus === 'loading' }/>\r\n            <IconButton onClick={ removeTodolist } disabled={ todolist.entityStatus === 'loading' }>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={ addTask } disabled={ todolist.entityStatus === 'loading' }/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={ t.id }\r\n                                                task={ t }\r\n                                                todolistId={ todolist.id }\r\n                                                entityStatus={ todolist.entityStatus }\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={ { paddingTop: '10px' } }>\r\n            <Button variant={ todolist.filter === 'all' ? 'outlined' : 'text' }\r\n                    onClick={ onAllClickHandler }\r\n                    color={ 'inherit' }\r\n            >All\r\n            </Button>\r\n            <Button variant={ todolist.filter === 'active' ? 'outlined' : 'text' }\r\n                    onClick={ onActiveClickHandler }\r\n                    color={ 'primary' }>Active\r\n            </Button>\r\n            <Button variant={ todolist.filter === 'completed' ? 'outlined' : 'text' }\r\n                    onClick={ onCompletedClickHandler }\r\n                    color={ 'secondary' }>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { AddItemForm } from \"../../components/addItemForm/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Todolist } from \"./Todolist/Todolist\";\r\nimport { AppRootStateType } from \"../../../bll/store\";\r\nimport { addTodolistTC, getTodolistTC, TodolistDomainType } from \"../../../bll/todolists-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistList = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getTodolistTC())\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to=\"/login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={ { padding: '15px', justifyContent: 'center' } }>\r\n            <AddItemForm addItem={ addTodolist }/>\r\n        </Grid>\r\n        <Grid container spacing={ 5 } style={ { justifyContent: 'center' } }>\r\n            {\r\n                todolists.map(tl => {\r\n                    return <Grid item key={ tl.id }>\r\n                        <Paper style={ { padding: '10px' } }>\r\n                            <Todolist\r\n                                todolist={ tl }\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n//types\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../../bll/store\";\r\nimport { setAppErrorAC } from \"../../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={ 6 } ref={ ref } variant=\"filled\" { ...props } />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if(reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({ error: null }))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={ error !== null } autoHideDuration={ 6000 } onClose={ handleClose }>\r\n            <Alert onClose={ handleClose } severity=\"error\" sx={ { width: '100%' } }>\r\n                { error }\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"./auth-reducer\";\r\nimport { AppRootStateType } from \"../../../bll/store\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'To short password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm();\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justifyContent={ 'center' }>\r\n        <Grid item justifyContent={ 'center' }>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={ 'https://social-network.samuraijs.com/' }\r\n                           target={ '_blank' }> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={ formik.handleSubmit }>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   { ...formik.getFieldProps('email') }/>\r\n                        { formik.touched.email && formik.errors.email ?\r\n                            <div style={ { color: \"red\" } }>{ formik.errors.email }</div> : null }\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   { ...formik.getFieldProps('password') }\r\n                        />\r\n                        { formik.touched.password && formik.errors.password ?\r\n                            <div style={ { color: \"red\" } }>{ formik.errors.password }</div> : null }\r\n                        <FormControlLabel label={ 'Remember me' }\r\n                                          control={ <Checkbox\r\n                                              { ...formik.getFieldProps('rememberMe') }/> }/>\r\n                        <Button type={ 'submit' } variant={ 'contained' } color={ 'primary' }>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n\r\n}\r\n\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport './App.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport { TaskType } from '../dal/todolist-api';\r\nimport { TodolistList } from \"../ui/features/TodolistList/TodolistList\";\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../bll/store\";\r\nimport { initializeAppTC, RequestStatusType } from \"./app-reducer\";\r\nimport { ErrorSnackbar } from \"../ui/components/errorSnackbar/ErrorSnackbar\";\r\nimport { Login } from \"../ui/features/Login/Login\";\r\nimport { logoutTC } from \"../ui/features/Login/auth-reducer\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if(!isInitialized) {\r\n        return <div\r\n            style={ { position: 'fixed', top: '30%', textAlign: 'center', width: '100%' } }>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={ { justifyContent: \"space-between\" } }>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button onClick={ logoutHandler } color=\"inherit\">Logout</Button> }\r\n                </Toolbar>\r\n                { status === 'loading' && <LinearProgress/> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={ <TodolistList/> }/>\r\n                    <Route path=\"login\" element={ <Login/> }/>\r\n                    <Route path=\"404\" element={ <h1 style={ { textAlign: \"center\" } }> 404: Page not found</h1> }/>\r\n                    <Route path=\"*\" element={ <Navigate to=\"/404\"/> }/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer } from \"../app/app-reducer\";\r\nimport { authReducer } from \"../ui/features/Login/auth-reducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React             from 'react';\r\nimport ReactDOM          from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals   from './reportWebVitals';\r\nimport App               from './app/App';\r\nimport { Provider }      from 'react-redux';\r\nimport { store }         from './bll/store';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={ store }>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}