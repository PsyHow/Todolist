{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","error","setError","title","setTitle","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","size","helperText","IconButton","onClick","AddBox","color","EditableSpan","editMode","setEditMode","style","width","autoFocus","onBlur","changeTitle","wordWrap","maxWidth","onDoubleClick","TodoList","tasksList","tasks","map","t","ListItem","padding","className","isDone","Checkbox","checked","changeTaskStatus","id","changeTaskTitle","aria-label","removeTask","Delete","fontSize","filter","changeTodolistTitle","removeTodolist","List","Button","changeTodoListFilter","margin","App","todolistID_1","v1","todolistID_2","todolist","setTodolist","setTasks","taskID","todolistID","addTask","newTask","f","m","tl","todolistComponents","tasksForRender","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","todolist_Id","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.18dd1034.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormTypes = {\r\n    addItem:(title:string)=>void\r\n}\r\n\r\nfunction AddItemForm(props:AddItemFormTypes) {\r\n\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={'Enter title'}\r\n                size={'small'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <AddBox color={\"primary\"}/>\r\n            </IconButton>\r\n            {/*{error && <div style={{color: \"red\"}}>Title is required!</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {useState, ChangeEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditablePropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditablePropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField value={title}\r\n                              style={{width: '100px'}}\r\n                              size={\"small\"}\r\n                              autoFocus={true}\r\n                              onChange={changeTitle}\r\n                              onBlur={offEditMode}>\r\n\r\n            </TextField>\r\n            : <span style={{wordWrap: 'break-word', maxWidth: '100px'}} onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    addItem: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const tasksList = props.tasks.map(t => {\r\n        const changeStatus =\r\n            (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n        const changeTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.id)\r\n        }\r\n\r\n        return (\r\n            <ListItem style={{padding:'0px'}}\r\n                      key={t.id} className={!t.isDone ? \"notCompleted\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    size={\"small\"}\r\n                    checked={t.isDone}\r\n                    onChange={changeStatus}\r\n                />\r\n                <EditableSpan title={t.title} changeTitle={changeTitle}/>\r\n                <IconButton aria-label={'delete'} onClick={() => props.removeTask(t.id, props.id)}>\r\n                    <Delete fontSize={\"small\"}/>\r\n                </IconButton>\r\n\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const setAllFilter = () => props.changeTodoListFilter(\"all\", props.id)\r\n    const setActiveFilter = () => props.changeTodoListFilter(\"active\", props.id)\r\n    const setCompletedFilter = () => props.changeTodoListFilter(\"completed\", props.id)\r\n\r\n    const addTask = (title: string) => props.addItem(title, props.id)\r\n\r\n    let allBtnClass = \"\";\r\n    if (props.filter === \"all\") {\r\n        allBtnClass = \"active-filter\"\r\n    }\r\n    //const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n    //const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\"\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n            <IconButton onClick={() => props.removeTodolist(props.id)}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n            <div>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n            <List>\r\n                {tasksList}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter === 'all' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter === 'active' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    style={{margin: '0 3px'}}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {  //создаем типизацию для всех тудулистов\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {             //создаем типизацию для Тасков тудулиста\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport function App() {\r\n\r\n    const todolistID_1 = v1()\r\n    const todolistID_2 = v1()\r\n\r\n    const [todolist, setTodolist] = useState<TodolistType[]>([    // создаем стейт в котором будем хранить тудулисты\r\n        {id: todolistID_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistID_2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({  //отдельный стейт для тасков тудулиста\r\n        [todolistID_1]: [\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"CSS\", isDone: false},\r\n            {id: v1(), title: \"HTML\", isDone: true},\r\n        ],\r\n        [todolistID_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Meat\", isDone: true},\r\n        ]\r\n    })\r\n\r\n    const removeTask = (taskID: string, todolistID: string) => {\r\n        //для того чтобы удалить таску нужно взять объект тасков с его айди и найти нужную таску по айди\r\n\r\n        tasks[todolistID] = tasks[todolistID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todolistID: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        tasks[todolistID] = [newTask, ...tasks[todolistID]]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolist(todolist.filter(f => f.id !== todolistID))\r\n        delete tasks[todolistID]\r\n    }\r\n\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todolistID: string) => {\r\n        tasks[todolistID] = tasks[todolistID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const changeTaskTitle = (taskID: string, title: string, todolistID: string) => {\r\n        tasks[todolistID] = tasks[todolistID].map(t => t.id === taskID ? {...t, title: title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeTodolistTitle = (title: string, todolistID: string) => {\r\n        setTodolist(todolist.map(m => m.id === todolistID ? {...m, title} : m))\r\n    }\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todolistID: string) => {\r\n        setTodolist(todolist.map(tl => tl.id === todolistID ? {...tl, filter} : tl))\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        const todolist_Id = v1()\r\n        const todolists: TodolistType = {\r\n            id: todolist_Id,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodolist([todolists, ...todolist])\r\n        setTasks({...tasks, [todolist_Id]: []})\r\n    }\r\n\r\n    //UI:\r\n\r\n    const todolistComponents = todolist.map(t => {\r\n\r\n        let tasksForRender = tasks[t.id]\r\n        if (t.filter === \"active\") {\r\n            tasksForRender = tasks[t.id].filter(t => !t.isDone)\r\n        }\r\n        if (t.filter === \"completed\") {\r\n            tasksForRender = tasks[t.id].filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <Grid item key={t.id}>\r\n                <Paper elevation={5} style={{padding: '15px'}} >\r\n                    <TodoList\r\n                        id={t.id}\r\n                        filter={t.filter}\r\n                        title={t.title}\r\n                        removeTodolist={removeTodolist}\r\n                        tasks={tasksForRender}\r\n                        addItem={addTask}\r\n                        removeTask={removeTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n\r\n            </Grid>\r\n\r\n        )\r\n    })\r\n    //\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container\r\n                      style={{padding: '15px', justifyContent: 'center'}}>\r\n                    <Grid item>\r\n                        <AddItemForm addItem={addTodolist}/>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid container spacing={5}\r\n                      style={{justifyContent: 'center'}}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}