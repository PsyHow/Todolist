{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","Store/todolist-reduser.tsx","Store/tasks-reducer.tsx","AppWithRedux.tsx","Store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","error","setError","title","setTitle","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","size","helperText","IconButton","onClick","AddBox","color","EditableSpan","console","log","editMode","setEditMode","style","width","autoFocus","onBlur","changeTitle","wordWrap","maxWidth","onDoubleClick","Task","changeStatus","useCallback","isDone","checked","task","id","removeTask","ListItem","padding","className","Checkbox","aria-label","Delete","fontSize","TodoList","tasksForTodolist","tasks","filter","t","taskId","changeTaskStatus","taskID","changeTaskTitle","tasksList","map","setAllFilter","changeTodoListFilter","setActiveFilter","setCompletedFilter","addTask","changeTodolistTitle","removeTodolist","List","Button","margin","initialState","AppWithRedux","dispatch","useDispatch","useSelector","state","todolist","todoLists","todolistID","type","todolistId","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","changeTodolistTitleAC","changeTodolistFilterAC","addTodolist","v1","addTodolistAC","todolistComponents","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","m","copyState","f","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.acf94d09.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormTypes = {\r\n    addItem:(title:string)=>void\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props:AddItemFormTypes) => {\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null){\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={'Enter title'}\r\n                size={'small'}\r\n                helperText={error}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <AddBox color={\"primary\"}/>\r\n            </IconButton>\r\n            {/*{error && <div style={{color: \"red\"}}>Title is required!</div>}*/}\r\n        </div>\r\n    )\r\n})","import React, {useState, ChangeEvent} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditablePropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const  EditableSpan = React.memo ((props: EditablePropsType) => {\r\n\r\n    console.log('editableSpan')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        props.changeTitle(title)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField value={title}\r\n                              style={{width: '100px'}}\r\n                              size={\"small\"}\r\n                              autoFocus={true}\r\n                              onChange={changeTitle}\r\n                              onBlur={offEditMode}>\r\n            </TextField>\r\n            : <span style={{wordWrap: 'break-word', maxWidth: '100px'}} onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./AppWithRedux\";\r\n\r\ntype PropsType = {\r\n    task: TaskType\r\n    changeStatus: (taskId: string, isDone: boolean) => void\r\n    changeTitle: (taskId: string, title: string) => void\r\n    removeTask: (taskId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: PropsType) => {\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let isDone = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, isDone)\r\n    }, [props.changeStatus, props.task.id])\r\n\r\n    const removeTask = useCallback(() => props.removeTask(props.task.id), [props.removeTask, props.task.id])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTitle(props.task.id, title)\r\n    }, [props.changeTitle, props.task.id])\r\n\r\n    return (\r\n        <ListItem style={{padding: '0px'}}\r\n                  className={!props.task.isDone ? \"notCompleted\" : \"\"}>\r\n            <Checkbox\r\n                color={\"primary\"}\r\n                size={\"small\"}\r\n                checked={props.task.isDone}\r\n                onChange={changeStatus}\r\n            />\r\n            <EditableSpan title={props.task.title} changeTitle={changeTitle}/>\r\n            <IconButton aria-label={'delete'} onClick={removeTask}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n\r\n        </ListItem>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton, List} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {FilterValuesType, TaskType} from \"./AppWithRedux\";\r\nimport {Task} from './Task';\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    addItem: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todolistID: string) => void\r\n    changeTodoListFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone)\r\n    }\r\n\r\n    const removeTask = useCallback((taskId) => props.removeTask(taskId, props.id),[props.removeTask,props.id])\r\n    const changeStatus = useCallback((taskId, isDone) => props.changeTaskStatus(taskId, isDone, props.id),[props.changeTaskStatus, props.id])\r\n    const changeTitle = useCallback((taskID, title) => props.changeTaskTitle(taskID, title, props.id),[props.changeTaskTitle,props.id])\r\n    const tasksList = tasksForTodolist.map(t => {\r\n        return (\r\n            <Task key={t.id}\r\n                  task={t}\r\n                  removeTask={removeTask}\r\n                  changeStatus={changeStatus}\r\n                  changeTitle={changeTitle}/>\r\n        )\r\n    })\r\n\r\n    const setAllFilter = useCallback(() => props.changeTodoListFilter(\"all\", props.id), [props.changeTodoListFilter, props.id])\r\n    const setActiveFilter = useCallback(() => props.changeTodoListFilter(\"active\", props.id), [props.changeTodoListFilter, props.id])\r\n    const setCompletedFilter = useCallback(() => props.changeTodoListFilter(\"completed\", props.id), [props.changeTodoListFilter, props.id])\r\n\r\n    const addTask = useCallback((title: string) => props.addItem(title, props.id), [props.addItem, props.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }, [props.changeTodolistTitle, props.id])\r\n    const removeTodolist = useCallback(() => props.removeTodolist(props.id),[props.removeTodolist,props.id])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n            <div>\r\n                <AddItemForm addItem={addTask}/>\r\n            </div>\r\n            <List>\r\n                {tasksList}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter === 'all' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter === 'active' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    style={{margin: '0 3px'}}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={\"contained\"}\r\n                    color={props.filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {FilterValuesType, TodolistType} from \"../AppWithRedux\";\r\n\r\ntype ActionsType = RemoveTodolistAction\r\n    | AddNewTodolistAction\r\n    | ChangeTodolistTitleAction\r\n    | ChangeTodolistFilterAction\r\n\r\nexport type RemoveTodolistAction = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddNewTodolistAction = {\r\n    type: 'ADD-TODOLIST'\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype ChangeTodolistTitleAction = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n}\r\ntype ChangeTodolistFilterAction = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistType[] = initialState, action: ActionsType): TodolistType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return [...state.filter(f => f.id !== action.id)]\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return [...state.map(m => m.id === action.id ? {...m, title: action.title} : m)]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return [...state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (id: string): RemoveTodolistAction => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\nexport const addTodolistAC = (title: string): AddNewTodolistAction => {\r\n    return {type: 'ADD-TODOLIST', todolistId: v1(), title}\r\n}\r\nexport const changeTodolistTitleAC = (title: string, id: string): ChangeTodolistTitleAction => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title, id}\r\n}\r\nexport const changeTodolistFilterAC = ( filter: FilterValuesType,id: string): ChangeTodolistFilterAction => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}","import {v1} from 'uuid';\r\nimport { TasksStateType } from '../AppWithRedux';\r\nimport {AddNewTodolistAction, RemoveTodolistAction} from './todolist-reduser';\r\n\r\ntype RemoveTaskAction = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\ntype AddTaskAction = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskStatusAction = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTitleStatusAction = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType =\r\n    RemoveTaskAction\r\n    | AddTaskAction\r\n    | AddNewTodolistAction\r\n    | ChangeTaskStatusAction\r\n    | ChangeTitleStatusAction\r\n    | RemoveTodolistAction;\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .filter(task => task.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolistId]: []}\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(m => m.id === action.taskId ? {...m, isDone: action.isDone} : m)\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(m => m.id === action.taskId ? {...m, title: action.title} : m)\r\n            }\r\n        case \"REMOVE-TODOLIST\":\r\n            /*let copyState = {...state}\r\n             delete copyState[action.id]\r\n             return copyState*/\r\n            let {[action.id]: [], ...copyState} = {...state}\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskAction => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskAction => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusAction => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTitleStatusAction => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n} from \"./Store/todolist-reduser\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./Store/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodolistType = {  //создаем типизацию для всех тудулистов\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {             //создаем типизацию для Тасков тудулиста\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport function AppWithRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks)\r\n    const todolist = useSelector<AppRootStateType, TodolistType[]>( state => state.todoLists)\r\n\r\n\r\n    const removeTask = useCallback( (taskID: string, todolistID: string) => {\r\n        dispatch(removeTaskAC(taskID,todolistID))\r\n    },[dispatch])\r\n    const addTask = useCallback( (title: string, todolistID: string) => {\r\n        dispatch(addTaskAC(title,todolistID))\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback( (todolistID: string) => {\r\n        dispatch(removeTodolistAC(todolistID))\r\n    },[dispatch])\r\n\r\n    const changeTaskStatus = useCallback( (taskID: string, isDone: boolean, todolistID: string) => {\r\n        dispatch(changeTaskStatusAC(taskID,isDone,todolistID))\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle = useCallback( (taskID: string, title: string, todolistID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID,title,todolistID))\r\n    },[dispatch])\r\n    const changeTodolistTitle = useCallback( (title: string, todolistID: string) => {\r\n        dispatch(changeTodolistTitleAC(title,todolistID))\r\n    },[dispatch])\r\n\r\n    const changeTodoListFilter = useCallback( (filter: FilterValuesType, todolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(filter,todolistID))\r\n    },[dispatch])\r\n\r\n    const addTodolist = useCallback( (title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    },[dispatch])\r\n    //UI:\r\n\r\n    const todolistComponents = todolist.map(t => {\r\n\r\n        return (\r\n            <Grid item key={t.id}>\r\n                <Paper elevation={5} style={{padding: '15px'}}>\r\n                    <TodoList\r\n                        id={t.id}\r\n                        filter={t.filter}\r\n                        title={t.title}\r\n                        removeTodolist={removeTodolist}\r\n                        tasks={tasks[t.id]}\r\n                        addItem={addTask}\r\n                        removeTask={removeTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n\r\n            </Grid>\r\n\r\n        )\r\n    })\r\n    //\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge={\"start\"} color=\"inherit\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container\r\n                      style={{padding: '15px', justifyContent: 'center'}}>\r\n                    <Grid item>\r\n                        <AddItemForm addItem={addTodolist}/>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid container spacing={5}\r\n                      style={{justifyContent: 'center'}}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolist-reduser\";\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        tasks: tasksReducer,\r\n        todoLists: todolistsReducer,\r\n    }\r\n)\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/store\";\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <AppWithRedux/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}